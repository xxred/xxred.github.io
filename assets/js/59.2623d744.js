(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{254:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"wsl2-ubuntu20-04-上使用-kubeadm-创建一个单主集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wsl2-ubuntu20-04-上使用-kubeadm-创建一个单主集群","aria-hidden":"true"}},[e._v("#")]),e._v(" wsl2 ubuntu20.04 上使用 kubeadm 创建一个单主集群")]),e._v(" "),s("ul",[s("li",[e._v("官方文档"),s("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 kubeadm 创建一个单主集群"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"环境初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境初始化","aria-hidden":"true"}},[e._v("#")]),e._v(" 环境初始化")]),e._v(" "),s("ul",[s("li",[e._v("建议尽可能初始化环境，命令"),s("code",[e._v("wsl --unregister Ubuntu-20.04")]),e._v("可重新安装，相当于重装系统。安装或重置过程中，打开这个 wsl2 窗口，提示如下：")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("Installing, this may take a few minutes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n适用于 Linux 的 Windows 子系统实例已终止。\nPlease create a default UNIX user account. The username does not need to match your Windows username.\nFor "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" information visit: https://aka.ms/wslusers\nEnter new UNIX username:\n")])])]),s("ul",[s("li",[e._v("此时关掉窗口再打开，以后则默认使用 root 用户登录。")]),e._v(" "),s("li",[e._v("使用阿里镜像：")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/etc/apt/sources.list\ndeb http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("-backports main restricted universe multiverse\nEOF\n")])])]),s("ul",[s("li",[e._v("更新缓存")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" update\n")])])]),s("ul",[s("li",[s("p",[e._v("wsl2 官方 ubuntu 系统启动方式为 init，而 k8s 安装过程需要系统以 systemd 方式启动。"),s("a",{attrs:{href:"https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/util/initsystem/initsystem_unix.go#L138",target:"_blank",rel:"noopener noreferrer"}},[e._v("查询 docker 状态的源码"),s("OutboundLink")],1),e._v("，可以看到是通过"),s("code",[e._v("systemctl is-active docker")]),e._v("查询，因此要想办法在 wsl2 启用 systemd。")])]),e._v(" "),s("li",[s("p",[e._v("参考"),s("a",{attrs:{href:"https://discourse.ubuntu.com/t/using-snapd-in-wsl2/12113",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using snapd in WSL2"),s("OutboundLink")],1),e._v("可知： Systemd 已经预安装，但并未激活。使用方式很简单，就是将它放到一个“容器”，在该容器里，Systemd 的 pid 是 1。命令如下：")])]),e._v(" "),s("li",[s("p",[e._v("安装"),s("code",[e._v("daemonize")])])])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" daemonize\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("basic.target\n")])])]),s("ul",[s("li",[e._v("使用命令"),s("code",[e._v("ps -aux")]),e._v("查看进程 pid。使用以下命令进入这个“容器”，在此查看进程 pid，可以看到 pid 为 1 的进程变成了 systemd。使用命令"),s("code",[e._v("stat /proc/1/exe")]),e._v("亦可验证。")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" nsenter -t "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("pidof systemd"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" -a "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("su")]),e._v(" - "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$LOGNAME")]),e._v("\n")])])]),s("h2",{attrs:{id:"安装-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 Docker")]),e._v(" "),s("ul",[s("li",[e._v("安装命令，参考"),s("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 Docker"),s("OutboundLink")],1),e._v("。")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 安装 Docker CE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 设置仓库")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### 安装软件包以允许 apt 通过 HTTPS 使用存储库")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  apt-transport-https ca-certificates "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" software-properties-common\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### 新增 Docker 的 官方 GPG 秘钥")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL https://download.docker.com/linux/ubuntu/gpg "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" apt-key "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### 添加 Docker apt 仓库")]),e._v("\nadd-apt-repository "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n  '),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(' \\\n  stable"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## 安装 Docker CE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  containerd.io "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  docker-ce "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  docker-ce-cli -y\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置 daemon")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/docker/daemon.json "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\n{\n  "registry-mirrors": ["https://registry.docker-cn.com"],\n  "exec-opts": ["native.cgroupdriver=systemd"],\n  "log-driver": "json-file",\n  "log-opts": {\n    "max-size": "100m"\n  },\n  "storage-driver": "overlay2"\n}\nEOF')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p /etc/systemd/system/docker.service.d\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 重启 docker.")]),e._v("\nsystemctl daemon-reload\nsystemctl restart docker\n")])])]),s("ul",[s("li",[e._v("其它资料：\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#cgroup-%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cgroup 驱动"),s("OutboundLink")],1)])])])]),e._v(" "),s("h2",{attrs:{id:"安装-kubelet、kubeadm、kubectl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-kubelet、kubeadm、kubectl","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 kubelet、kubeadm、kubectl")]),e._v(" "),s("ul",[s("li",[e._v("官方文档"),s("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#%E5%AE%89%E8%A3%85-kubeadm-kubelet-%E5%92%8C-kubectl",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装 kubeadm、kubelet 和 kubectl"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("官方 GPG 秘钥无法访问，按照"),s("a",{attrs:{href:"https://developer.aliyun.com/mirror/kubernetes",target:"_blank",rel:"noopener noreferrer"}},[e._v("阿里云 Kubernetes 镜像配置"),s("OutboundLink")],1),e._v("，设置一下安装源然后开始安装 kubelet、kubeadm、kubectl。因为还没 ubuntu20.04 还没有相应源，先用 ubuntu18.04 的。")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y apt-transport-https\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" apt-key "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/etc/apt/sources.list.d/kubernetes.list\ndeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y kubelet kubeadm kubectl\n")])])]),s("h2",{attrs:{id:"使用-kubeadm-创建单个控制平面集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-kubeadm-创建单个控制平面集群","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用 kubeadm 创建单个控制平面集群")]),e._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("初始化文档"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[e._v("插件列表参考文档"),s("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装扩展"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[e._v("污点和容忍： "),s("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/configuration/taint-and-toleration/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Taint 和 Toleration"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[e._v("https://hub.docker.com/u/gotok8s")])]),e._v(" "),s("li",[s("p",[e._v("初始化命令："),s("code",[e._v("kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=ubuntu.wsl --image-repository=gotok8s --v=5")])]),e._v(" "),s("ul",[s("li",[e._v("其中 pod-network-cidr 指定网络驱动的 CIDR，根据使用的插件而定。这里使用 "),s("a",{attrs:{href:"https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("flannel"),s("OutboundLink")],1),e._v("，"),s("a",{attrs:{href:"https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),s("OutboundLink")],1),e._v("指示使用值"),s("code",[e._v("10.244.0.0/16")]),e._v("。")]),e._v(" "),s("li",[e._v("control-plane-endpoint 指定主节点地址，可以是 IP 地址或者是可以映射 ip 地址的 DNS 名称。因此使用前要设置一下:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("EOF "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v("/etc/hosts\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v("  address "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" eth0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" inet "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" -F "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{  print "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$2")]),e._v("}'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" -F / "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{ print "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v("}'")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("  ubuntu.wsl\nEOF\n")])])]),s("ul",[s("li",[e._v("image-repository 指定拉取镜像的仓库，"),s("a",{attrs:{href:"https://hub.docker.com/u/gotok8s",target:"_blank",rel:"noopener noreferrer"}},[e._v("gotok8s"),s("OutboundLink")],1),e._v("是 docker hub 上的用户，同步了安装所需镜像，否则国内会因访问不了 gcr.io 而安装失败。")]),e._v(" "),s("li",[s("code",[e._v("--v=5")]),e._v("是调试选项，加上后可看到更详细输出。")])])])]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('root@DESKTOP-QNMROJ1:~# kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=ubuntu.wsl --image-repository=gotok8s\nW0706 21:45:49.154779 1903997 version.go:102] could not fetch a Kubernetes version from the internet: unable to get URL "https://dl.k8s.io/release/stable-1.txt": Get https://dl.k8s.io/release/stable-1.txt: dial tcp: lookup dl.k8s.io on 127.0.0.53:53: server misbehaving\nW0706 21:45:49.154839 1903997 version.go:103] falling back to the local client version: v1.18.5\nW0706 21:45:49.155372 1903997 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]\n[init] Using Kubernetes version: v1.18.5\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using \'kubeadm config images pull\'\n[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"\n[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"\n[kubelet-start] Starting the kubelet\n[certs] Using certificateDir folder "/etc/kubernetes/pki"\n[certs] Generating "ca" certificate and key\n[certs] Generating "apiserver" certificate and key\n[certs] apiserver serving cert is signed for DNS names [desktop-qnmroj1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local ubuntu.wsl] and IPs [10.96.0.1 172.25.14.224]\n[certs] Generating "apiserver-kubelet-client" certificate and key\n[certs] Generating "front-proxy-ca" certificate and key\n[certs] Generating "front-proxy-client" certificate and key\n[certs] Generating "etcd/ca" certificate and key\n[certs] Generating "etcd/server" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [desktop-qnmroj1 localhost] and IPs [172.25.14.224 127.0.0.1 ::1]\n[certs] Generating "etcd/peer" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [desktop-qnmroj1 localhost] and IPs [172.25.14.224 127.0.0.1 ::1]\n[certs] Generating "etcd/healthcheck-client" certificate and key\n[certs] Generating "apiserver-etcd-client" certificate and key\n[certs] Generating "sa" key and public key\n[kubeconfig] Using kubeconfig folder "/etc/kubernetes"\n[kubeconfig] Writing "admin.conf" kubeconfig file\n[kubeconfig] Writing "kubelet.conf" kubeconfig file\n[kubeconfig] Writing "controller-manager.conf" kubeconfig file\n[kubeconfig] Writing "scheduler.conf" kubeconfig file\n[control-plane] Using manifest folder "/etc/kubernetes/manifests"\n[control-plane] Creating static Pod manifest for "kube-apiserver"\n[control-plane] Creating static Pod manifest for "kube-controller-manager"\nW0706 21:45:54.052056 1903997 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "Node,RBAC"\n[control-plane] Creating static Pod manifest for "kube-scheduler"\nW0706 21:45:54.053414 1903997 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "Node,RBAC"\n[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s\n[apiclient] All control plane components are healthy after 33.002925 seconds\n[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace\n[kubelet] Creating a ConfigMap "kubelet-config-1.18" in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node desktop-qnmroj1 as control-plane by adding the label "node-role.kubernetes.io/master=\'\'"\n[mark-control-plane] Marking the node desktop-qnmroj1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: 8328sm.dh21due3jz2okibj\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace\n[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities\nand service account keys on each node and then running the following as root:\n\n  kubeadm join ubuntu.wsl:6443 --token 8328sm.dh21due3jz2okibj \\\n    --discovery-token-ca-cert-hash sha256:31f44da2c275026d9d71ddcd138f8c6a5ac4fecbc167d8b6247788f9651afa53 \\\n    --control-plane\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join ubuntu.wsl:6443 --token 8328sm.dh21due3jz2okibj \\\n    --discovery-token-ca-cert-hash sha256:31f44da2c275026d9d71ddcd138f8c6a5ac4fecbc167d8b6247788f9651afa53\n')])])]),s("ul",[s("li",[e._v("配置 cluster 信息使 kubectl 可用")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 非 root 用户执行下面命令")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# root用户可执行如下命令")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KUBECONFIG")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/etc/kubernetes/admin.conf\n")])])]),s("ul",[s("li",[e._v("安装网络插件")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n")])])]),s("ul",[s("li",[e._v("控制平面节点隔离。默认情况下，出于安全原因，群集不会在控制平面节点上调度 Pod。如果希望能够在控制平面节点上安排 Pod，例如对于用于开发的单机 Kubernetes 群集，请运行：")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl taint nodes --all node-role.kubernetes.io/master-\n")])])]),s("ul",[s("li",[e._v("运行 nginx 测试。如果遇到"),s("code",[e._v("Temporary failure in name resolution")]),e._v("这种访问的问题，请打开非 systemd 空间的控制台操作。")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubectl run nginx --image"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nginx --port"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(" --hostport"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1\n")])])]),s("ul",[s("li",[e._v("监控集群状态，大概每两秒刷新一次。")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("watch")]),e._v(" kubectl get all -A\n")])])]),s("ul",[s("li",[s("a",{attrs:{href:"https://kubernetes.io/docs/reference/setup-tools/kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubeadm 常用命令"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://kubernetes.io/docs/reference/kubectl/kubectl/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubectl 常用命令"),s("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=n.exports}}]);