(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{245:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"asp-net-core-blazor-模板组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asp-net-core-blazor-模板组件","aria-hidden":"true"}},[e._v("#")]),e._v(" ASP.NET Core Blazor 模板组件")]),e._v(" "),a("ul",[a("li",[e._v("Blazor 的模板化组件是类似于 vue 模板组件的东西，其定义是：接受一个或多个 UI 模板作为参数的组件，可将其用作组件呈现逻辑的一部分。 模板化组件允许你创作比常规组件更易于使用的更高级别的组件。 几个示例包括：\n"),a("ul",[a("li",[e._v("允许用户为表的标头、行和脚注指定模板的表组件。")]),e._v(" "),a("li",[e._v("允许用户在列表中指定用于呈现项的模板的列表组件。")])])])]),e._v(" "),a("h2",{attrs:{id:"模板参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 模板参数")]),e._v(" "),a("ul",[a("li",[e._v("模板化组件通过指定 RenderFragment 或 RenderFragment"),a("T",[e._v("类型的一个或多个组件参数进行定义。 呈现片段表示要呈现的 UI 段。 RenderFragment"),a("T",[e._v(" 采用可在调用呈现片段时指定的类型参数。")])],1)],1),e._v(" "),a("li",[e._v("TableTemplate 组件：")])]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@typeparam TItem\n\n<table class="table">\n    <thead>\n        <tr>@TableHeader</tr>\n    </thead>\n    <tbody>\n        @foreach (var item in Items)\n        {\n            <tr>@RowTemplate(item)</tr>\n        }\n    </tbody>\n    <tfoot>\n        <tr>@TableFooter</tr>\n    </tfoot>\n</table>\n\n@code {\n    [Parameter]\n    public RenderFragment TableHeader { get; set; }\n\n    [Parameter]\n    public RenderFragment<TItem> RowTemplate { get; set; }\n\n    [Parameter]\n    public RenderFragment TableFooter { get; set; }\n\n    [Parameter]\n    public IReadOnlyList<TItem> Items { get; set; }\n}\n')])])]),a("ul",[a("li",[e._v("使用模板化组件时，可以使用与参数名称匹配的子元素（在以下示例中为 TableHeader 和 RowTemplate）指定模板参数：")])]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<TableTemplate Items="pets">\n    <TableHeader>\n        <th>ID</th>\n        <th>Name</th>\n    </TableHeader>\n    <RowTemplate>\n        <td>@context.PetId</td>\n        <td>@context.Name</td>\n    </RowTemplate>\n</TableTemplate>\n')])])]),a("h2",{attrs:{id:"模板上下文参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板上下文参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 模板上下文参数")]),e._v(" "),a("ul",[a("li",[e._v("作为元素传递的类型 RenderFragment"),a("T",[e._v(" 的组件参数具有一个名为 context 的隐式参数（例如，前面的代码示例 @context.PetId），但你可以使用子元素上的 Context 特性来更改参数名称。 在下面的示例中，RowTemplate 元素的 Context 特性指定了 pet 参数：")])],1)]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<TableTemplate Items="pets">\n    <TableHeader>\n        <th>ID</th>\n        <th>Name</th>\n    </TableHeader>\n    <RowTemplate Context="pet">\n        <td>@pet.PetId</td>\n        <td>@pet.Name</td>\n    </RowTemplate>\n</TableTemplate>\n')])])]),a("p",[e._v("或者，您可以在 component 元素上指定 Context 特性。 指定的 Context 特性适用于所有指定的模板参数。 如果要为隐式子内容指定内容参数名称（不包含任何换行子元素），这会很有用。 在下面的示例中，Context 特性显示在 TableTemplate 元素上，并应用于所有模板参数：")]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<TableTemplate Items="pets" Context="pet">\n    <TableHeader>\n        <th>ID</th>\n        <th>Name</th>\n    </TableHeader>\n    <RowTemplate>\n        <td>@pet.PetId</td>\n        <td>@pet.Name</td>\n    </RowTemplate>\n</TableTemplate>\n')])])]),a("h2",{attrs:{id:"泛型类型化组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型化组件","aria-hidden":"true"}},[e._v("#")]),e._v(" 泛型类型化组件")]),e._v(" "),a("ul",[a("li",[e._v("模板化组件通常是通用类型。 例如，泛型 ListViewTemplate 组件可用于呈现 IEnumerable"),a("T",[e._v(" 值。 若要定义一般组件，请使用@typeparam 指令指定类型参数：")])],1)]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@typeparam TItem\n\n<ul>\n    @foreach (var item in Items)\n    {\n        @ItemTemplate(item)\n    }\n</ul>\n\n@code {\n    [Parameter]\n    public RenderFragment<TItem> ItemTemplate { get; set; }\n\n    [Parameter]\n    public IReadOnlyList<TItem> Items { get; set; }\n}\n")])])]),a("p",[e._v("当使用泛型类型的组件时，将在可能的情况下推断类型参数：")]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<ListViewTemplate Items="pets">\n    <ItemTemplate Context="pet">\n        <li>@pet.Name</li>\n    </ItemTemplate>\n</ListViewTemplate>\n')])])]),a("p",[e._v('否则，必须使用与类型参数的名称匹配的属性显式指定 type 参数。 在下面的示例中，TItem="Pet" 指定类型：')]),e._v(" "),a("div",{staticClass:"language-razor extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<ListViewTemplate Items="pets" TItem="Pet">\n    <ItemTemplate Context="pet">\n        <li>@pet.Name</li>\n    </ItemTemplate>\n</ListViewTemplate>\n')])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("ul",[a("li",[e._v("总的来讲，跟 vue 的模板组件形式上差不多，用法有不同。他们都是同样的思想，将常用的组件变成模板达到共用的目的。")])])])},[],!1,null,null,null);t.default=r.exports}}]);