(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{291:function(e,_,v){"use strict";v.r(_);var a=v(0),t=Object(a.a)({},function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"关于webpack的编译结果及编译结果运行浅析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于webpack的编译结果及编译结果运行浅析","aria-hidden":"true"}},[e._v("#")]),e._v(" 关于Webpack的编译结果及编译结果运行浅析")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("webpack")]),e._v("模块引入顺序")]),e._v(" "),v("li",[v("code",[e._v("webpack")]),e._v("打包之后的文件结构是什么呢？")]),e._v(" "),v("li",[v("code",[e._v("webpack")]),e._v("打包之后的代码是如何运行的？")]),e._v(" "),v("li",[e._v("如何还原"),v("code",[e._v("webpack")]),e._v("打包之前的文件结构呢？")]),e._v(" "),v("li",[e._v("需要在"),v("code",[e._v("webpack")]),e._v("打包的项目引用"),v("code",[e._v("jQuery")]),e._v("组件怎么做呢？")]),e._v(" "),v("li",[e._v("本文将解答以上问题。")])]),e._v(" "),v("h2",{attrs:{id:"模块引入顺序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模块引入顺序","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块引入顺序")]),e._v(" "),v("ul",[v("li",[v("blockquote",[v("p",[e._v("每个模块的引入都将被放到全局缓存，任何一个模块第二次被引入，都是从缓存中取，所以模块引入是先判断缓存是否存在以路径为key的值，不存在就根据路径去引入，同时加入缓存。")])])]),e._v(" "),v("li",[v("blockquote",[v("p",[e._v("而且缓存的是引用类型，每次返回的都是同一个变量，因此在一个模块中修改了该模块，另一个模块引入后得到的是修改之后的。比如A模块引入jquery模块，并注入了很多属性方法，然后在B模块引入jquery模块，也能访问到在A模块注入的属性方法")])])]),e._v(" "),v("li",[e._v("A模块依赖B模块，在模块C中引入A，会先执行B的引入，所以代码运行到A的内部的时候，B模块其实已经引入了，并不是"),v("code",[e._v("import b from B")]),e._v("的时候才执行引入。")])]),e._v(" "),v("h2",{attrs:{id:"打包后的文件结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#打包后的文件结构","aria-hidden":"true"}},[e._v("#")]),e._v(" 打包后的文件结构")]),e._v(" "),v("ul",[v("li")]),e._v(" "),v("h2",{attrs:{id:"_3-还原打包之前的文件结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-还原打包之前的文件结构","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.还原打包之前的文件结构")]),e._v(" "),v("ul",[v("li",[e._v("打开浏览器开发者工具，切换到资源选项卡，找到"),v("code",[e._v("webpack://")]),e._v("这一项。")]),e._v(" "),v("li",[v("code",[e._v(".")]),e._v("这一项或者类似"),v("code",[e._v("./src")]),e._v("以"),v("code",[e._v("./")]),e._v("开头的文件夹就是源码所在目录，而"),v("code",[e._v("./")]),e._v("就是原本项目的根目录，即"),v("code",[e._v("package.json")]),e._v("文件所在目录。")]),e._v(" "),v("li",[e._v("找到文件的地址，触发请求，通过执行脚本使浏览器加载，即可出现源码")])])])},[],!1,null,null,null);_.default=t.exports}}]);