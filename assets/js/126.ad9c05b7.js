(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{281:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"简单理解-oauth-2-0-及资料收集，identityserver4-部分源码解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单理解-oauth-2-0-及资料收集，identityserver4-部分源码解析","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单理解 OAuth 2.0 及资料收集，IdentityServer4 部分源码解析")]),t._v(" "),n("ul",[n("li",[t._v("虽然经常用 OAuth 2.0，但是原理却不曾了解，印象里觉得很简单，请求跳来跳去，今天看完相关介绍，就来捋一捋 OAuth 2.0，记录一下加深印象")]),t._v(" "),n("li",[t._v("OAuth 2.0 是行业标准的授权协议。OAuth 2.0 取代了 2006 年创建的原始 OAuth 协议所做的工作.OAuth 2.0 专注于客户端开发人员的简单性，同时为 Web 应用程序，桌面应用程序，移动电话和客厅设备提供特定的授权流程。该规范及其扩展正在 IETF OAuth 工作组内开发。")]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 OAuth 2.0"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://oauth.net",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth 社区网站"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/jackcao/p/10031828.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth Server 的实现-IdentityServer4 源码分析"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://kb.cnblogs.com/page/189153/",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth 的机制原理讲解及开发流程"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.cnblogs.com/stulzq/p/8119928.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("IdentityServer4 中文文档与实战"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/raochunjiang/IdentityServer4.Docs.zh-Hans",target:"_blank",rel:"noopener noreferrer"}},[t._v("IdentityServer4.Docs.zh-Hans"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"}},[t._v("rfc6749"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.cnblogs.com/linianhui/p/oauth2-authorization.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth2 授权"),n("OutboundLink")],1),t._v("，建议了解大概概念在看")])]),t._v(" "),n("h2",{attrs:{id:"解决的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决的问题")]),t._v(" "),n("ul",[n("li",[t._v("在不将密码透露给第三方的基础上，授权给第三方访问服务器资源")])]),t._v(" "),n("h2",{attrs:{id:"认证流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#认证流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 认证流程")]),t._v(" "),n("ol",[n("li",[t._v("得到授权码 code")]),t._v(" "),n("li",[t._v("获取 access token")]),t._v(" "),n("li",[t._v("通过 access token，获取 OpenID")]),t._v(" "),n("li",[t._v("通过 access token 及 OpenID 调用 API，获取用户授权信息")])]),t._v(" "),n("p",[n("img",{attrs:{src:"http://blog.unvs.cn/upload/oauth2.0_developer_pic.jpg",alt:" "}})]),t._v(" "),n("ul",[n("li",[t._v("第一步得到授权码 code，这个可以看做一个获取资源的请求，该请求需要登录（输入密码，或者 qq 登录等）。登陆过程就是用户自己在授权服务器登陆的，不用第三方拿密码自己登陆授权服务器。登录授权服务器之后，返回 code，完成第一步。到这里用户的登录动作就完成了")]),t._v(" "),n("li",[t._v("第二步第三方应用根据 code 请求 token，再到几步后面获取其它资源，刷新 token 等")]),t._v(" "),n("li",[t._v("中间根据授权类型，授权范围做相应处理，整个协议大概就可以这样子理解，实际的登录过程由用户在授权服务器登录，所以输入密码过程要认准域名，防止伪造的网站，泄露了密码")])]),t._v(" "),n("h2",{attrs:{id:"net-实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net-实现","aria-hidden":"true"}},[t._v("#")]),t._v(" .net 实现")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/IdentityServer/IdentityServer4",target:"_blank",rel:"noopener noreferrer"}},[t._v("IdentityServer"),n("OutboundLink")],1),t._v("是一个免费的开源 OpenID Connect 和 OAuth 2.0 框架，适用于 ASP .NET Core。IdentityServer4 由 Dominick Baier 和 Brock Allen 创建和维护，整合了在应用程序中集成基于令牌的身份验证，单点登录和 API 访问控制所需的所有协议实现和可扩展性点。IdentityServer4 由 OpenID Foundation 正式认证，因此符合规范且可互操作")]),t._v(" "),n("li",[t._v("这是 ASP .NET Core 中用的较多的框架，可参考 demo 快速体验")]),t._v(" "),n("li",[t._v("[]https://github.com/raochunjiang/IdentityServer4.Docs.zh-Hans")])]),t._v(" "),n("h2",{attrs:{id:"自定义-identityserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-identityserver","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义 IdentityServer")]),t._v(" "),n("ul",[n("li",[t._v("仿照 IdentityServer4 源码造一个 IdentityServer")])]),t._v(" "),n("h3",{attrs:{id:"结构及流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构及流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构及流程")]),t._v(" "),n("ol",[n("li",[t._v("主要看中间件"),n("code",[t._v("IdentityServerMiddleware")]),t._v("，所有的端点走的都是这么个流程，所以关键点在于"),n("code",[t._v("endpoint")]),t._v("，不用的 url 请求对应不同的"),n("code",[t._v("endpoint")])])]),t._v(" "),n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" endpoint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" router"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Find")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endpoint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    _logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("LogInformation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Invoking IdentityServer endpoint: {endpointType} for {url}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FullName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" endpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        _logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("LogTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Invoking result: {type}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FullName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("首先是根据 context 查找匹配的端点，然后调用端点的"),n("code",[t._v("ProcessAsync")]),t._v("方法，得到结果"),n("code",[t._v("result")]),t._v("，然后执行方法"),n("code",[t._v("ExecuteAsync")]),t._v("得到结果")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("所有的授权相关请求，都对应一个 endpoint，每个 endpoint，基本都有一个 Validator，用于验证。比如验证客户端参数是否合法，请求信息时验证是否登陆等等。_validator 是 IAuthorizeRequestValidator 接口的实例，用于验证，可通过 DI 注入自己的验证")])]),t._v(" "),n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ProcessAsync方法")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" Task"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IEndpointResult"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpContext")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略部分代码")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" UserSession"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetUserAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessAuthorizeRequestAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略部分代码")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ProcessAuthorizeRequestAsync方法")]),t._v("\n         "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("internal")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" Task"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IEndpointResult"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessAuthorizeRequestAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NameValueCollection")]),t._v(" parameters"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClaimsPrincipal")]),t._v(" user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConsentResponse")]),t._v(" consent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略部分代码")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// validate request")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" _validator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ValidateAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameters"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略部分代码")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeResult")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果我们要自定义某个授权过程中的请求，可以继承 IEndpointHandler 实现自己的 endpoint，并自定义路径")]),t._v(" "),n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首先实现IEndpointHandler接口")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomAuthorizeEndpoint")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEndpointHandler")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Task"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("IEndpointResult"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessAsync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpContext")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NotImplementedException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后在Startup.cs的ConfigureServices方法注入")]),t._v("\n    services"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token generic-method"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddTransient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomAuthorizeEndpoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    services"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddSingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Endpoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Authorize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/customUrl/authorize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CustomAuthorizeEndpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("其他方面同理，实现相关接口，注入，即可实现自定义，以下列出一些接口及功能说明：")])]),t._v(" "),n("ul",[n("li",[t._v("IClientStore，客户端存储，可自定义实现从数据库存取客户端数据")]),t._v(" "),n("li",[t._v("IEndpointHandler，Endpoint 端点，根据 url 匹配 Endpoint，处理并响应请求")]),t._v(" "),n("li",[t._v("IAuthorizeRequestValidator，授权请求验证，可校验客户端参数、类型是否跟已注册客户端一致")])]),t._v(" "),n("p",[t._v("框架提供的自定义验证，即在默认验证实现中加入自定义验证")]),t._v(" "),n("ul",[n("li",[t._v("ICustomAuthorizeRequestValidator，允许在授权和令牌请求中插入自定义验证逻辑")]),t._v(" "),n("li",[t._v("ICustomTokenRequestValidator，允许在授权和令牌请求中插入自定义验证逻辑")]),t._v(" "),n("li",[t._v("ICustomTokenValidator，允许插入自定义令牌验证逻辑")])]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("ul",[n("li",[t._v("入门过程不能太急躁，首先过一下相关概念，然后跑一下具体的例子，仔细感受例子，尽量跟相关概念对上号，慢慢对上所有概念，这时候就会对相关概念进一步加深理解。")]),t._v(" "),n("li",[t._v("接下来就可以自己 Diy 一下功能，根据自己的需求做小小的改动。这个步骤相当于学会了之后用在项目里，虽然还没达到了如指掌的程度，但是出了问题能快速定位问题，不会一头雾水，这是之前体验例子对概念的好处。如果还没用上项目，可以吧 Diy 的方式方法记录下来备用，如果直接用上了，也可以记录下来，举一反三")]),t._v(" "),n("li",[t._v("假如这是个比较重要，常用的功能，但是又比较复杂，难理解，那么走完上述两步之后，建议自己实现个精简版。这样有利于整体把握概念，扫清所有盲点，只有自己能实现了，才算是真正掌握，以后多次用到，出了问题也能轻松定位解决，这个收益绝对很赚")]),t._v(" "),n("li",[t._v("以上就是一点学习总结，不能掉进心浮气躁的陷阱，这将一无所获且浪费时间！")])])])},[],!1,null,null,null);s.default=e.exports}}]);