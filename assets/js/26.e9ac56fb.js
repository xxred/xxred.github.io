(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{345:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sqlite-关于-linux-arm-上的驱动问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sqlite-关于-linux-arm-上的驱动问题","aria-hidden":"true"}},[t._v("#")]),t._v(" SQLite 关于 linux-arm 上的驱动问题")]),t._v(" "),a("ul",[a("li",[t._v("最近"),a("a",{attrs:{href:"https://github.com/NewLifeX/NewLife.Cube",target:"_blank",rel:"noopener noreferrer"}},[t._v("魔方"),a("OutboundLink")],1),t._v("要跑在树莓派上，但是 SQLite 驱动却不支持 arm，驱动用的是"),a("code",[t._v("System.Data.SQLite")]),t._v("，它只支持"),a("code",[t._v("linux-x64")]),t._v("、"),a("code",[t._v("osx-x64")]),t._v("、"),a("code",[t._v("win-x64")]),t._v("、"),a("code",[t._v("win-x86")]),t._v("。下面记录解决办法。")])]),t._v(" "),a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("ul",[a("li",[t._v("运行后问题如下：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":13:02.432  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" Y "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" System.DllNotFoundException: Unable to load shared library "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SQLite.Interop.dll'")]),t._v(" or one of its dependencies. In order to "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" diagnose loading problems, consider setting the LD_DEBUG environment variable: libSQLite.Interop.dll: cannot "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" shared object file: No such "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" or directory\n   at System.Data.SQLite.UnsafeNativeMethods.sqlite3_config_none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SQLiteConfigOpsEnum "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("op")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLite3.StaticIsInitialized"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLiteLog.Initialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLiteConnection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("ctor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String connectionString, Boolean parseViaFramework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLiteConnection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("ctor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String connectionString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLiteConnection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("ctor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   at System.Data.SQLite.SQLiteFactory.CreateConnection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("同样的代码，同样的程序，到了 linux-arm 上就出问题了，结合错误信息分析，问题与"),a("code",[t._v("SQLite.Interop.dll")]),t._v("有关，但不是文件不存在。")]),t._v(" "),a("li",[t._v("该驱动有各个平台的"),a("code",[t._v("SQLite.Interop.dll")]),t._v("，通过该文件解决不同平台的需求。但唯独 arm 上没有，理应可以自己编译一个，奈何水平不够，只能瞪着源码干着急。")])]),t._v(" "),a("h2",{attrs:{id:"分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Interop")]),t._v("意为互操作，"),a("code",[t._v("SQLite.Interop.dll")]),t._v("作为互操作 dll，只能在特定平台被使用。这种方式的优势是库用户可以以 AnyCPU 平台构建项目，并且处理器体系结构将在运行时解析：如果您在 x86 或 x64 上运行，则所有功能都可以按预期工作，前提是两个 dll 均可用。像上述情况，就是 arm 平台的 dll 缺失了 。")]),t._v(" "),a("li",[t._v("去"),a("a",{attrs:{href:"http://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网下载页"),a("OutboundLink")],1),t._v("寻找 arm 相关驱动，但是没有找着。于是把源码下载下来，工程庞大，版本众多，"),a("code",[t._v("SQLite.Interop.dll")]),t._v("相关的项目是个 C++工程，根本搞不定，遂放弃。")])]),t._v(" "),a("h2",{attrs:{id:"寻找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寻找","aria-hidden":"true"}},[t._v("#")]),t._v(" 寻找")]),t._v(" "),a("ul",[a("li",[t._v("寻找解决方案。在早前将 ORM 迁移到 dotnetcore 的时候，对于 SQLite 部分的驱动，官方并没有提供 linux 版本的，但是微软有一款驱动可以用，提供给 EFCore 用的。其命名空间是"),a("code",[t._v("Microsoft.Data.Sqlite")]),t._v("，是属于重新设计过的驱动。这个可以一试。")]),t._v(" "),a("li",[t._v("于是将包"),a("code",[t._v("Microsoft.Data.Sqlite")]),t._v("添加到项目中测试，文件如下：\n"),a("ul",[a("li",[a("code",[t._v("Microsoft.Data.Sqlite.dll")])]),t._v(" "),a("li",[a("code",[t._v("SQLitePCLRaw.batteries_v2.dll")])]),t._v(" "),a("li",[a("code",[t._v("SQLitePCLRaw.core.dll")])]),t._v(" "),a("li",[a("code",[t._v("SQLitePCLRaw.nativelibrary.dll")])]),t._v(" "),a("li",[a("code",[t._v("SQLitePCLRaw.provider.dynamic_cdecl.dll")])]),t._v(" "),a("li",[a("code",[t._v("runtimes/linux-arm/native/libe_sqlite3.so")]),t._v("，其他平台忽略，只是平台标识换了，和文件名不一样。")])])]),t._v(" "),a("li",[t._v("相比"),a("code",[t._v("System.Data.SQLite")]),t._v("只多一个"),a("code",[t._v("SQLite.Interop.dll")]),t._v("，微软的驱动多了很多文件，取而代之的是各个平台的类库。linux 平台是"),a("code",[t._v(".so")]),t._v("，mac 平台是"),a("code",[t._v(".dylib")]),t._v("。")]),t._v(" "),a("li",[t._v("换驱动之后，运行结果报错：string 无法强制转化为 DateTime。这个经反复测试，确实是驱动的问题。找到数据类型设计说明"),a("a",{attrs:{href:"https://github.com/aspnet/Microsoft.Data.Sqlite/wiki/Data-Type-Mappings",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Type Mappings"),a("OutboundLink")],1),t._v("以及相关讨论"),a("a",{attrs:{href:"https://github.com/dotnet/efcore/issues/8824",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sample data to determine CLR type"),a("OutboundLink")],1),t._v("。由此可知，驱动返回的类型只有"),a("code",[t._v("INTEGER")]),t._v("、"),a("code",[t._v("BLOB")]),t._v("、"),a("code",[t._v("TEXT")]),t._v("、"),a("code",[t._v("REAL")]),t._v("。")]),t._v(" "),a("li",[t._v("修改 ORM 代码，将 string 转化成 DateTime，运行成功！")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("这两种驱动有何异同？以我有限的知识分析，以及参考："),a("a",{attrs:{href:"https://stackoverflow.com/questions/34144491/given-the-choice-what-are-the-pros-cons-of-mixed-mode-assemblies-vs-separate-i",target:"_blank",rel:"noopener noreferrer"}},[t._v("如果有选择，混合模式程序集与单独的互操作 DLL 的优缺点是什么？"),a("OutboundLink")],1),t._v("。得出它们都是属于单独的互操作 dll 模式，有特定平台的类库，托管程序集对其进行 P/Invoke 互操作调用，并且库用户可以在 AnyCPU 平台构建项目。相比混合模式，库用户需要将程序编译为指定平台的程序，跑多少个平台就要编译多少种程序。显然前者占优。")]),t._v(" "),a("li",[t._v("跨平台程序，以及嵌入式开发，这些问题都应该是避免不了的，多多了解相关只是用处也非常大。更重要的是要懂得分析出现的问题，以及找到可靠参考资料。")])])])},[],!1,null,null,null);e.default=s.exports}}]);